- Use the recursive definition: F(n)=F(n−1)+F(n−2), with base cases F(0)=0 and
F(1)=1.
- To avoid recomputing values, store intermediate Fibonacci numbers in an array
(bottom-up DP).
- Alternatively, use memoization with recursion to store already computed values.

Solution:
          #include<bits/stdc++.h>
          using namespace std;
          int fib(int n)
          {
          
              vector<int> arr(n,0);
              arr[0]=arr[1]=1;
              if (n==0 & n==1)
                  return n;
              for (int i=2; i<n; i++)
              {
                  arr[i]=arr[i-1]+arr[i-2];
              }
              return arr[n-1];
          }
          int main()
          {
              int n;
              cout<<"Find Fibonacci of: ";
              cin>>n;
              if(n<0)
                  cout<<"Enter a Positive integer";
              else
                  cout <<"Fibonacci number is: "<<fib(n);
              return 0;
          }

